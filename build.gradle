/*
 * Template microservice.
 */

buildscript {
  repositories {
    if(version == "DEV") {
      mavenLocal()
    }
    jcenter()
    mavenCentral()
  }
}

plugins {
  id 'java'
  id 'com.inomial.grow-plugin' version '1.2.3'
  id "com.github.ben-manes.versions" version "0.42.0"
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'jacoco'
}

// lock dependency versions, run `./gradlew dependencies --write-locks` to update gradle.lockfile
dependencyLocking {
  // lockAllConfigurations causes issues for dependencyUpdates (ben-manes/gradle-versions-plugin)
  "$System.env.UNLOCK_DEPENDENCIES" == "true" ? unlockAllConfigurations() : lockAllConfigurations()
  lockMode = LockMode.STRICT
}

apply plugin: "application"
apply plugin: "com.inomial.grow-plugin"

// description = "change me to a brief description of what this application does. this is viewable in `gradle -q projects` and is also set in the container image labels."

if (description == null) {
  throw new GradleException('description not set in build.gradle')
}

// let Jenkins choose the version
version = file('build.version').text.trim()

mainClassName = "com.inomial.${project.name.replaceAll('-', '.')}.Main"

// We don't need these for Docker.
tasks.distTar.enabled = false
tasks.distZip.enabled = false

tasks.withType(JavaCompile) {
  options.compilerArgs << '-parameters'
}

configurations {
  jacocoAgent
}

ext {
  log4j_version = '2.19.0'
  slf4j_version = '2.0.5'
  secore_version = '4.0.19'
}

// runtime logging dependencies
dependencyManagement {
  imports {
    mavenBom "org.apache.logging.log4j:log4j-bom:${log4j_version}"
  }
}

dependencies {
  // use `UNLOCK_DEPENDENCIES=true ./gradlew dependencyUpdates` to check for updates to these dependencies

  // Supply log4j2 logging implementation, plus slf4j bindings.
  implementation 'com.telflow.logging:telflow-logging:11.6.10'
  implementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
  implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
  // ensure 3rd party libs using other logging APIs are forwarded to slf4j:
  implementation "org.slf4j:jul-to-slf4j:${slf4j_version}"
  implementation "org.apache.logging.log4j:log4j-1.2-api:${log4j_version}"
  implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"
  implementation "org.slf4j:jcl-over-slf4j:${slf4j_version}"

  implementation "com.inomial:secore:${secore_version}"

  // Include this, for example, if you want to use grow (also uncomment: dependsOn 'growJar')
  // runtimeOnly 'com.inomial:sql-core:1.1.+';
  // Include this to pull in functions useful for SQL tests
  // runtimeOnly 'com.inomial:sql-test:1.0';

  // Include this if you're working with messages
  // implementation 'com.inomial:cim:1.0.+'

  // Include this if you need Consul support:
  // implementation 'com.telflow.factory:configuration-management:1.0.0'

  testImplementation 'junit:junit:4.13.2'

  jacocoAgent 'org.jacoco:org.jacoco.agent:0.8.7'
}

repositories {
  mavenCentral()

  exclusiveContent {
    forRepository {
      maven {
        url "https://maven.inomial.com/"
      }
    }

    forRepository {
      if (version == "DEV") {
        mavenLocal()
      }
    }

    filter {
      includeGroupByRegex "com\\.inomial.*"
    }
  }

  exclusiveContent {
    forRepository {
      maven {
        url "https://nexus.office.dgit.biz:8443/nexus/content/repositories/dgit-maven-releases"
        mavenContent {
          releasesOnly()
        }
      }
    }

    forRepository {
      if (version == "DEV") {
        mavenLocal()
      }
    }

    filter {
      includeGroupByRegex "com\\.telflow.*"
      includeGroupByRegex "com\\.dgitsystems.*"
    }
  }
}

task growJar(type: Jar, dependsOn: configurations.runtimeClasspath) {
  classifier = "grow"

  from(configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }
    .collect { zipTree(it) }) {
    include "GROW/**"
  }

  from('src/main/grow') {
    into("GROW/APPLICATION")
  }

  from("${buildDir}/tmp/dependencies.grow") {
    into("GROW/APPLICATION")
  }
}

jar {
  dependsOn 'grow'
//  Uncomment if you want to use grow
//  dependsOn 'growJar'

  manifest {
    attributes(
      "Main-Class": mainClassName,
      "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }
}

task createProperties(dependsOn: classes) {
  doLast {
    new File("$buildDir/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['project'] = project.name
        p['description'] = "'" + project.description + "'"
        p.store w, null
    }
  }
}

task mkdocker(type: Exec, dependsOn: build) {
  commandLine './mkdocker'
}

assemble {
  dependsOn createProperties
}

build.finalizedBy(mkdocker)


task copyToLib( type: Copy ) {
    into "docker/lib"
    from configurations.runtimeClasspath
}

task cleanDocker( type: Delete ) {
  delete fileTree(
      dir: 'docker',
      include: ['*.jar', 'lib/**', 'agentlib/**']
    )
  delete 'docker/GROW'
}

// Obtains the JaCoCo agent .jar
task installJacocoAgentJar(type: Copy) {
  shouldRunAfter cleanDocker
  from ({ zipTree(configurations.jacocoAgent.singleFile) }) {
    include 'jacocoagent.jar'
  }
  into 'docker/agentlib'
}

mkdocker { dependsOn cleanDocker, copyToLib, installJacocoAgentJar }

clean.dependsOn cleanDocker

// Add sources jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
  // Include source archive in Inomial Maven repository so Javadoc descriptions are available.
  archives sourcesJar
}

test {
  finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
  reports {
    xml.required = true
  }
  dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'INSTRUCTION'
        minimum = 0.75
      }
    }
  }
}

jacocoTestReport.finalizedBy(jacocoTestCoverageVerification)
