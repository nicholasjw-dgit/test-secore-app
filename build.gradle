/*
 * Template microservice.
 */

buildscript {
  repositories {
    if(version == "DEV") {
      mavenLocal()
    }
    jcenter()
    mavenCentral()
  }
}

plugins {
  id 'com.inomial.grow-plugin' version '1.2.2'
  id "com.github.ben-manes.versions" version "0.33.0"
}

apply plugin: "application"
apply plugin: "com.inomial.grow-plugin"

// description = "change me to a brief description of what this application does. this is viewable in `gradle -q projects` and is also set in the container image labels."

if(description == null) {
  throw new GradleException('description not set in build.gradle')
}

//version = '1.1'
// let Jenkins choose the version
version = file('build.version').text.trim()

mainClassName = "com.inomial.${project.name.replaceAll('-', '.')}.Main"

// We don't need these for Docker.
tasks.distTar.enabled = false
tasks.distZip.enabled = false

tasks.withType(JavaCompile) {
  options.compilerArgs << '-parameters'
}

dependencies {
  // use `./gradlew dependencyUpdates` to check for updates to these dependencies

  compile 'com.inomial:secore:2.0.0';
  
  // Include this, for example, if you want to use grow (also uncomment: dependsOn 'growJar')
  // compile 'com.inomial:sql-core:1.1.+';

  // Include this if you're working with messages
  // compile 'com.inomial:cim:1.0.+'

  testCompile 'junit:junit:4.12'
}

repositories {
// we should avoid mavenLocal(), see https://docs.gradle.org/current/userguide/declaring_repositories.html#sec:case-for-maven-local
  if(version == "DEV") {
    mavenLocal()
  }
  maven {
    url "https://maven.inomial.com/"
  }
  mavenCentral()
}

task growJar(type: Jar, dependsOn: configurations.runtimeClasspath) {
  classifier = "grow"

  from(configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }
    .collect { zipTree(it) }) {
    include "GROW/**"
  }

  from('src/main/grow') {
    into("GROW/APPLICATION")
  }

  from("${buildDir}/tmp/dependencies.grow") {
    into("GROW/APPLICATION")
  }
}

jar {
  dependsOn 'grow'
//  Uncomment if you want to use grow
//  dependsOn 'growJar'

  manifest {
    attributes(
      "Main-Class": mainClassName,
      "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }
}

task createProperties(dependsOn: classes) {
  doLast {
    new File("$buildDir/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['project'] = project.name
        p['description'] = "'" + project.description + "'"
        p.store w, null
    }
  }
}

task mkdocker(type: Exec, dependsOn: build) {
  commandLine './mkdocker'
}

assemble {
  dependsOn createProperties
}

build.finalizedBy(mkdocker)


task copyToLib( type: Copy ) {
    into "docker/lib"
    from configurations.runtime
}

task cleanDocker( type: Delete ) {
  delete fileTree(
      dir: 'docker',
      include: ['*.jar', 'lib/**']
    )
  delete 'docker/GROW'
}

mkdocker { dependsOn cleanDocker, copyToLib }

clean.dependsOn cleanDocker

// Add sources jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
  // Include source archive in Inomial Maven repository so Javadoc descriptions are available.
  archives sourcesJar
}

