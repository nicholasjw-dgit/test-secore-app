/*
 * Template microservice.
 */

buildscript {
  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
  }
}

plugins {
  id 'com.github.johnrengelman.shadow' version '2.0.4'
  // If your microsevice needs Grow to manage its DB schema, then uncomment following line:
  // id 'com.inomial.grow-plugin' version '1.2.2'
}

apply plugin: "application"

version = "1.0"

mainClassName = "com.inomial.template.Main"

dependencies {
  // Always use the latest secore. I think there's a way to specify the
  // "latest" version in gradle, but I can't remember it.
  compile 'com.inomial:secore:1.1.14';
  
  // Include this if you're working with messages
  // compile 'com.inomial:rating-messages:1.0.10'

  testCompile 'junit:junit:4.12'
}

repositories {
  mavenLocal()
  maven {
    url "https://maven.inomial.com/"
  }
  mavenCentral()
}

build {
  dependsOn {
    shadowJar
  }
}

shadowJar {
  // cf. <http://imperceptiblethoughts.com/shadow/#controlling_jar_content_merging>
  // This is needed to ensure that the the "/META-INF/services/javax.ws.rs.ext.Providers" files in the various
  // RESTeasy-related jars are correctly concatenated together and prevent one file from overwriting the others.
  //
  // RESTeasy reads a list of class names from this file location (embedded in the .jar) upon startup to
  // register the various marshalling/unmarshalling providers; this includes the stock providers (marshalling
  // primitive types, strings and streams). Allowing this file to be clobbered will result in
  // NoMessageBodyReaderFoundFailure/NoMessageBodyWriterFoundFailure exceptions at the entry or exit of a REST method
  // that has a parameter or return type whose provider class has been left out.  -BLR
  mergeServiceFiles()

  // If your microservice uses Grow to manage its DB objects, then uncomment the following lines:
  /*
  from('src/main/grow') {
    into("GROW/APPLICATION")
  }

  from("${buildDir}/tmp/dependencies.grow") {
    into("GROW/APPLICATION")
  }
  */
}

task createProperties(dependsOn: classes) {
  doLast {
    new File("$buildDir/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p.store w, null
    }
  }
}

// I would personally recommend using the `./run' script instead of `gradle up',
// for reasons listed in the comments of the `./run' script.  -BLR
task up(type: Exec) {
  dependsOn {
    build
  }
  commandLine 'docker-compose', 'up'
}

// Make Docker
task mkdocker(type: Exec, dependsOn: build) {
    commandLine './mkdocker'
}

assemble {
  dependsOn createProperties
}

build.finalizedBy(mkdocker)
