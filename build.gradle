/*
 * Template microservice.
 */

buildscript {
  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
  }
}

plugins {
  id 'com.inomial.grow-plugin' version '1.2.2'
}

apply plugin: "application"
apply plugin: "com.inomial.grow-plugin"


version = '1.1'
mainClassName = "com.inomial.${project.name.replaceAll('-', '.')}.Main"

// We don't need these for Docker.
tasks.distTar.enabled = false
tasks.distZip.enabled = false

tasks.withType(JavaCompile) {
  options.compilerArgs << '-parameters'
}

dependencies {
  compile 'com.inomial:secore:1.3.+';
  
  // Include this, for example, if you want to use grow
  // compile 'com.inomial:sql-core:1.1.+';

  // Include this if you're working with messages
  // compile 'com.inomial:cim:1.0.+'

  testCompile 'junit:junit:4.12'
}

repositories {
  mavenLocal()
  maven {
    url "https://maven.inomial.com/"
  }
  mavenCentral()
}

task growJar(type: Jar) {
  classifier = "grow"

  from(configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }
    .collect { zipTree(it) }) {
    include "GROW/**"
  }

  from('src/main/grow') {
    into("GROW/APPLICATION")
  }

  from("${buildDir}/tmp/dependencies.grow") {
    into("GROW/APPLICATION")
  }
}

jar {
  dependsOn 'grow'
  dependsOn 'growJar'

  manifest {
    attributes(
      "Main-Class": mainClassName,
      "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
  }
}

task createProperties(dependsOn: classes) {
  doLast {
    new File("$buildDir/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['project'] = project.name
        p.store w, null
    }
  }
}

task mkdocker(type: Exec, dependsOn: build) {
  commandLine './mkdocker'
}

assemble {
  dependsOn createProperties
}

build.finalizedBy(mkdocker)


task copyToLib( type: Copy ) {
    into "docker/lib"
    from configurations.runtime
}

task clearLib( type: Delete ) {
  delete fileTree(
      dir: 'docker',
      include: ['*.jar', 'lib/**']
    )
}

mkdocker { dependsOn clearLib, copyToLib }

clean.dependsOn clearLib
